{"ast":null,"code":"import React from \"react\";\nimport PersonList from \"./EmployeeData\";\n\nclass FirstSort extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: PersonList,\n      sortOrder: \"\"\n    };\n\n    this.handleNum = whatToSort => {\n      let newSort = this.state.persons.sort((a, b) => {\n        if (this.state.sortOrder === \"des\") {\n          return a[whatToSort] - b[whatToSort];\n        } else {\n          return b[whatToSort] - a[whatToSort];\n        }\n      });\n      const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\n      this.setState({\n        userList: newSort,\n        sortOrder: newSortOrder\n      });\n    };\n\n    this.handleSort = whatToSort => {\n      const nameSort = this.state.PersonList.sort((a, b) => {\n        var nameA = a[whatToSort].toUpperCase();\n        var nameB = b[whatToSort].toUpperCase();\n\n        if (this.state.nameSort !== \"des\") {\n          if (nameA < nameB) {\n            return -1;\n          }\n\n          if (nameA > nameB) {\n            return 1;\n          }\n\n          return 0;\n        } else {\n          if (nameA < nameB) {\n            return 1;\n          }\n\n          if (nameA > nameB) {\n            return -1;\n          }\n\n          return 0;\n        }\n      });\n      const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\n      this.setState({\n        persons: newSort,\n        sortOrder: newSortOrder\n      });\n    };\n  }\n\n}\n\nexport default FirstSort;","map":{"version":3,"sources":["C:/Users/sarin/desktop/bootcamp/Employee-directory/src/Components/sorting.js"],"names":["React","PersonList","FirstSort","Component","state","persons","sortOrder","handleNum","whatToSort","newSort","sort","a","b","newSortOrder","setState","userList","handleSort","nameSort","nameA","toUpperCase","nameB"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACJC,MAAAA,OAAO,EAAEJ,UADL;AAEJK,MAAAA,SAAS,EAAE;AAFP,KAD4B;;AAAA,SAKxCC,SALwC,GAK3BC,UAAD,IAAgB;AACxB,UAAIC,OACG,GAAG,KAAKL,KAAL,CAAWC,OAAX,CAAmBK,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxC,YAAI,KAAKR,KAAL,CAAWE,SAAX,KAAyB,KAA7B,EAAoC;AAChC,iBAAOK,CAAC,CAACH,UAAD,CAAD,GAAgBI,CAAC,CAACJ,UAAD,CAAxB;AACH,SAFD,MAEO;AACH,iBAAOI,CAAC,CAACJ,UAAD,CAAD,GAAgBG,CAAC,CAACH,UAAD,CAAxB;AACH;AACJ,OANS,CADV;AAQA,YAAMK,YAAY,GAAG,KAAKT,KAAL,CAAWE,SAAX,KAAyB,KAAzB,GAAiC,KAAjC,GAAyC,KAA9D;AACA,WAAKQ,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEN,OAAZ;AAAqBH,QAAAA,SAAS,EAAEO;AAAhC,OAAd;AACH,KAhBuC;;AAAA,SAkBxCG,UAlBwC,GAkB1BR,UAAD,IAAgB;AACzB,YAAMS,QAAQ,GAAG,KAAKb,KAAL,CAAWH,UAAX,CAAsBS,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClD,YAAIM,KAAK,GAAGP,CAAC,CAACH,UAAD,CAAD,CAAcW,WAAd,EAAZ;AACA,YAAIC,KAAK,GAAGR,CAAC,CAACJ,UAAD,CAAD,CAAcW,WAAd,EAAZ;;AACA,YAAI,KAAKf,KAAL,CAAWa,QAAX,KAAwB,KAA5B,EAAmC;AAC/B,cAAIC,KAAK,GAAGE,KAAZ,EAAmB;AACf,mBAAO,CAAC,CAAR;AACH;;AAAC,cAAIF,KAAK,GAAGE,KAAZ,EAAmB;AACjB,mBAAO,CAAP;AACH;;AACD,iBAAO,CAAP;AACH,SAPD,MAOO;AACH,cAAIF,KAAK,GAAGE,KAAZ,EAAmB;AACf,mBAAO,CAAP;AACH;;AACD,cAAIF,KAAK,GAAGE,KAAZ,EAAmB;AACf,mBAAO,CAAC,CAAR;AACH;;AACD,iBAAO,CAAP;AACH;AACJ,OAnBgB,CAAjB;AAoBA,YAAMP,YAAY,GAAG,KAAKT,KAAL,CAAWE,SAAX,KAAyB,KAAzB,GAAiC,KAAjC,GAAyC,KAA9D;AACA,WAAKQ,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAEI,OAAX;AAAoBH,QAAAA,SAAS,EAAEO;AAA/B,OAAd;AACH,KAzCuC;AAAA;;AAAA;;AA4CxC,eAAeX,SAAf","sourcesContent":["import React from \"react\";\r\nimport PersonList from \"./EmployeeData\";\r\n\r\nclass FirstSort extends React.Component {\r\n    state = {\r\n        persons: PersonList,\r\n        sortOrder: \"\"\r\n    }\r\nhandleNum = (whatToSort) => {\r\n    let newSort:\r\n    newSort = this.state.persons.sort((a, b) => {\r\n        if (this.state.sortOrder === \"des\") {\r\n            return a[whatToSort] - b[whatToSort];\r\n        } else {\r\n            return b[whatToSort] - a[whatToSort]\r\n        }\r\n    })\r\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n    this.setState({ userList: newSort, sortOrder: newSortOrder })\r\n};\r\n\r\nhandleSort = (whatToSort) => {\r\n    const nameSort = this.state.PersonList.sort((a, b) => {\r\n        var nameA = a[whatToSort].toUpperCase();\r\n        var nameB = b[whatToSort].toUpperCase();\r\n        if (this.state.nameSort !== \"des\") {\r\n            if (nameA < nameB) {\r\n                return -1 ;\r\n            } if (nameA > nameB) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        } else {\r\n            if (nameA < nameB) {\r\n                return 1;\r\n            }\r\n            if (nameA > nameB) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        }\r\n    });\r\n    const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n    this.setState({ persons: newSort, sortOrder: newSortOrder })\r\n}\r\n}\r\n\r\nexport default FirstSort"]},"metadata":{},"sourceType":"module"}