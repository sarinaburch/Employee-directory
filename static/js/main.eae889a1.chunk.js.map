{"version":3,"sources":["Utils/API.js","Components/EmployeeData.js","Components/Table.js","Components/SearchBar.js","Components/Navbar.js","Components/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["query","Axios","get","PersonList","state","result","sortOrder","searchInput","resultEmployees","API","then","res","setState","data","results","catch","err","console","log","editSearchTerm","e","target","value","dynamicSearch","last","filter","toLowerCase","includes","handleStringSort","newSort","sort","a","b","nameA","name","first","toUpperCase","nameB","newSortOrder","handleStringSort2","this","className","type","placeholder","onChange","onClick","map","email","phone","location","city","id","React","Component","Table","SearchForm","styles","navbar","height","nameFont","fontSize","fontWeight","Navbar","style","role","aria-label","src","alt","width","aria-expanded","data-target","aria-hidden","EmployeeTable","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.eae889a1.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nconst BASEURL = 'https://randomuser.me/api/?results=100&nat=us'\r\n\r\nexport default {\r\n    search: function(query) {\r\n        return Axios.get(BASEURL + query)\r\n    }\r\n}","import React from 'react';\r\nimport API from '../Utils/API';\r\n\r\nclass PersonList extends React.Component {\r\n    state = {\r\n        result: [],\r\n        sortOrder: \"\",\r\n        searchInput: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.resultEmployees(\"\")\r\n    }\r\n\r\n    resultEmployees = query => {\r\n        API.search(query)\r\n            .then(res => this.setState({ result: res.data.results }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n   editSearchTerm = (e) => {\r\n       this.setState({searchInput: e.target.value})\r\n   }\r\n\r\n   dynamicSearch = () => {\r\n       return this.state.result.last.filter(results => results.toLowerCase().includes(this.state.searchInput.toLowerCase()))\r\n   }\r\n\r\n    // handleSort = () => {\r\n    //                 let newSort\r\n    //                     if (this.state.sortOrder !== \"des\") {\r\n    //                        newSort = this.state.result.sort((a, b) => {\r\n    //                         return a.id.value - b.id.value;\r\n    //                     }) \r\n    //                 } else {\r\n    //                     newSort = this.state.result.sort((a, b) => {\r\n    //                         return b.id.value - a.id.value;\r\n    //                     }) \r\n    //                 }\r\n    //                 console.log(newSort)\r\n    //                 const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\"\r\n    //                 this.setState({result: newSort, sortOrder: newSortOrder})\r\n    //             }\r\n\r\n    handleStringSort = () => {\r\n        const newSort = this.state.result.sort((a, b) => {\r\n            var nameA = a.name.first.toUpperCase();\r\n            var nameB = b.name.first.toUpperCase();\r\n            if (this.state.sortOrder === \"des\") {\r\n\r\n                if (nameA < nameB) {\r\n                    return -1;\r\n                }\r\n                if (nameA > nameB) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            } else {\r\n                if (nameA < nameB) {\r\n                    return 1;\r\n                }\r\n                if (nameA > nameB) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n        });\r\n        const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n        this.setState({ result: newSort, sortOrder: newSortOrder })\r\n    }\r\n    handleStringSort2 = () => {\r\n        const newSort = this.state.result.sort((a, b) => {\r\n            var nameA = a.name.last.toUpperCase();\r\n            var nameB = b.name.last.toUpperCase();\r\n            if (this.state.sortOrder === \"des\") {\r\n\r\n                if (nameA < nameB) {\r\n                    return -1;\r\n                }\r\n                if (nameA > nameB) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            } else {\r\n                if (nameA < nameB) {\r\n                    return 1;\r\n                }\r\n                if (nameA > nameB) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n        });\r\n        const newSortOrder = this.state.sortOrder === \"des\" ? \"asc\" : \"des\";\r\n        this.setState({ result: newSort, sortOrder: newSortOrder })\r\n    }\r\n\r\n  \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section className=\"hero is-light\">\r\n                    <div className=\"hero-body \">\r\n                        <div className=\"container has-text-centered \">\r\n                            <h1 className=\"title\">\r\n                                Employee Directory\r\n                            </h1>\r\n                            <h4>*Click First or Last Name to sort alphabetically or search by name in search bar.</h4>\r\n                            <input className=\"input is-rounded is-normal\" type=\"text\" placeholder=\"Search Employee By Name\" value={this.state.searchInput} onChange= {this.editSearchTerm} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <table className=\"table-container table is-fullwidth is-hoverable scheme-main-bis\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={() => this.handleStringSort(\"first\")}>First Name</th>\r\n                            <th onClick={() => this.handleStringSort2(\"last\")}>Last Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone</th>\r\n                            <th>City</th>\r\n                            <th>Employee ID</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.result.map(result => {\r\n                            return <tr > \r\n                                <td>{result.name.first}</td>\r\n                                <td result={this.dynamicSearch}>{result.name.last}</td>\r\n                                <td>{result.email}</td>\r\n                                <td>{result.phone}</td>\r\n                                <td>{result.location.city}</td>\r\n                                <td>{result.id.value}</td>\r\n                            </tr>;\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonList;","import React from \"react\";\r\nimport PersonList from \"./EmployeeData\";\r\n\r\n\r\n\r\n\r\nfunction Table() {\r\n    return (\r\n        <div>\r\n      <PersonList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nfunction SearchForm() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default SearchForm;","import React from 'react';\r\n\r\nconst styles = {\r\n    navbar: {\r\n      height: \"120px\"\r\n    },\r\n    nameFont: {\r\n      fontSize: \"34px\",\r\n      fontWeight: \"bold\"\r\n    }\r\n};\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav style={styles.navbar} className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    {/* eslint-disable-next-line*/}\r\n                    <a>\r\n                        <img src=\"ArchieHead.jpg\" alt=\"logo\" width=\"115\" height=\"115\" />\r\n                    </a>\r\n                    {/* eslint-disable-next-line*/}\r\n                    <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\" >\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n\r\n                    <div className=\"navbar-start\">\r\n                        {/* eslint-disable-next-line*/}\r\n                        <a className=\"navbar-item\" style={styles.nameFont}>\r\n                            Archie Industries</a>\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from \"react\";\r\nimport Table from \"./Table\";\r\nimport SearchForm from \"./SearchBar\"\r\nimport Navbar from './Navbar'\r\n\r\n\r\nfunction EmployeeTable() {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n     \r\n      <div>\r\n        <Table />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default EmployeeTable;","import React from 'react';\nimport './App.css';\nimport EmployeeTable from './Components/EmployeeTable'\n\n\nfunction App() {\n  return <EmployeeTable />;\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}